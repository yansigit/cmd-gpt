name: Build and Publish Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build Application for All Platforms
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23 # Specify the Go version you need

      # Cache Go modules
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Binaries
        run: |
          mkdir -p dist
          platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64" "windows/arm64")
          for platform in "${platforms[@]}"; do
            os=${platform%/*}
            arch=${platform#*/}
            output="dist/app-${os}-${arch}"
            if [ "$os" = "windows" ]; then
              output+=".exe"
            fi
            echo "Building for $os/$arch..."
            GOOS=$os GOARCH=$arch go build -o "$output"
          done

      - name: List Built Binaries
        run: ls -l dist

      # Upload individual binaries for the next job
      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/*

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Download the binaries from the previous job
      - name: Download Binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
      
      - name: List Downloaded Binaries
        run: ls -l

      # Create or update a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: test-release-${{ github.run_number }}
          release_name: Test Release \#${{ github.run_number }}
          body: |
            This test release was created using GitHub Actions. 
            It contains binaries built for Linux, macOS, and Windows.
          draft: true
          prerelease: true

      # Upload each binary to the release
      - name: Upload Linux AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-linux-amd64
          asset_name: app-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-linux-arm64
          asset_name: app-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload macOS AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-darwin-amd64
          asset_name: app-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-darwin-arm64
          asset_name: app-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Windows AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-windows-amd64.exe
          asset_name: app-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-windows-arm64.exe
          asset_name: app-windows-arm64.exe
          asset_content_type: application/octet-stream
